{"ast":null,"code":"import axios from'axios';const API_BASE_URL=process.env.REACT_APP_API_URL||'http://localhost:8080/api';const api=axios.create({baseURL:API_BASE_URL,headers:{'Content-Type':'application/json'}});export const quizService={// Get random questions for the game\ngetRandomQuestions:async function(){let count=arguments.length>0&&arguments[0]!==undefined?arguments[0]:10;try{const response=await api.get(\"/questions/random?count=\".concat(count));return response.data;}catch(error){console.error('Error fetching random questions:',error);throw error;}},// Get all questions\ngetAllQuestions:async()=>{try{const response=await api.get('/questions');return response.data;}catch(error){console.error('Error fetching questions:',error);throw error;}},// Get questions by difficulty\ngetQuestionsByDifficulty:async difficulty=>{try{const response=await api.get(\"/questions/by-difficulty?difficulty=\".concat(difficulty));return response.data;}catch(error){console.error('Error fetching questions by difficulty:',error);throw error;}},// Create a new user\ncreateUser:async(username,email)=>{try{const response=await api.post('/users',{username,email});return response.data;}catch(error){console.error('Error creating user:',error);throw error;}},// Get user by username\ngetUserByUsername:async username=>{try{const response=await api.get(\"/users/\".concat(username));return response.data;}catch(error){console.error('Error fetching user:',error);throw error;}},// Start a game session\nstartGameSession:async function(userId){let sessionType=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'PRACTICE';try{const response=await api.post('/game-sessions/start',{userId,sessionType});return response.data;}catch(error){console.error('Error starting game session:',error);throw error;}},// End a game session\nendGameSession:async(sessionId,score,totalQuestions)=>{try{const response=await api.post(\"/game-sessions/\".concat(sessionId,\"/end\"),{score,totalQuestions});return response.data;}catch(error){console.error('Error ending game session:',error);throw error;}},// Get user game history\ngetUserGameHistory:async userId=>{try{const response=await api.get(\"/users/\".concat(userId,\"/game-history\"));return response.data;}catch(error){console.error('Error fetching game history:',error);throw error;}}};export default quizService;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","quizService","getRandomQuestions","count","arguments","length","undefined","response","get","concat","data","error","console","getAllQuestions","getQuestionsByDifficulty","difficulty","createUser","username","email","post","getUserByUsername","startGameSession","userId","sessionType","endGameSession","sessionId","score","totalQuestions","getUserGameHistory"],"sources":["C:/Users/jcupp/coderepos/0code/frontend/src/services/quizService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\nexport const quizService = {\n  // Get random questions for the game\n  getRandomQuestions: async (count = 10) => {\n    try {\n      const response = await api.get(`/questions/random?count=${count}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching random questions:', error);\n      throw error;\n    }\n  },\n\n  // Get all questions\n  getAllQuestions: async () => {\n    try {\n      const response = await api.get('/questions');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching questions:', error);\n      throw error;\n    }\n  },\n\n  // Get questions by difficulty\n  getQuestionsByDifficulty: async (difficulty) => {\n    try {\n      const response = await api.get(`/questions/by-difficulty?difficulty=${difficulty}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching questions by difficulty:', error);\n      throw error;\n    }\n  },\n\n  // Create a new user\n  createUser: async (username, email) => {\n    try {\n      const response = await api.post('/users', { username, email });\n      return response.data;\n    } catch (error) {\n      console.error('Error creating user:', error);\n      throw error;\n    }\n  },\n\n  // Get user by username\n  getUserByUsername: async (username) => {\n    try {\n      const response = await api.get(`/users/${username}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching user:', error);\n      throw error;\n    }\n  },\n\n  // Start a game session\n  startGameSession: async (userId, sessionType = 'PRACTICE') => {\n    try {\n      const response = await api.post('/game-sessions/start', {\n        userId,\n        sessionType\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error starting game session:', error);\n      throw error;\n    }\n  },\n\n  // End a game session\n  endGameSession: async (sessionId, score, totalQuestions) => {\n    try {\n      const response = await api.post(`/game-sessions/${sessionId}/end`, {\n        score,\n        totalQuestions\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error ending game session:', error);\n      throw error;\n    }\n  },\n\n  // Get user game history\n  getUserGameHistory: async (userId) => {\n    try {\n      const response = await api.get(`/users/${userId}/game-history`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching game history:', error);\n      throw error;\n    }\n  },\n};\n\nexport default quizService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}