{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nexport const quizService = {\n  // Get random questions for the game\n  getRandomQuestions: async (count = 10) => {\n    try {\n      const response = await api.get(`/questions/random?count=${count}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching random questions:', error);\n      throw error;\n    }\n  },\n  // Get all questions\n  getAllQuestions: async () => {\n    try {\n      const response = await api.get('/questions');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching questions:', error);\n      throw error;\n    }\n  },\n  // Get questions by difficulty\n  getQuestionsByDifficulty: async difficulty => {\n    try {\n      const response = await api.get(`/questions/by-difficulty?difficulty=${difficulty}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching questions by difficulty:', error);\n      throw error;\n    }\n  },\n  // Create a new user\n  createUser: async (username, email) => {\n    try {\n      const response = await api.post('/users', {\n        username,\n        email\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error creating user:', error);\n      throw error;\n    }\n  },\n  // Get user by username\n  getUserByUsername: async username => {\n    try {\n      const response = await api.get(`/users/${username}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching user:', error);\n      throw error;\n    }\n  },\n  // Start a game session\n  startGameSession: async (userId, sessionType = 'PRACTICE') => {\n    try {\n      const response = await api.post('/game-sessions/start', {\n        userId,\n        sessionType\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error starting game session:', error);\n      throw error;\n    }\n  },\n  // End a game session\n  endGameSession: async (sessionId, score, totalQuestions) => {\n    try {\n      const response = await api.post(`/game-sessions/${sessionId}/end`, {\n        score,\n        totalQuestions\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error ending game session:', error);\n      throw error;\n    }\n  },\n  // Get user game history\n  getUserGameHistory: async userId => {\n    try {\n      const response = await api.get(`/users/${userId}/game-history`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching game history:', error);\n      throw error;\n    }\n  }\n};\nexport default quizService;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","quizService","getRandomQuestions","count","response","get","data","error","console","getAllQuestions","getQuestionsByDifficulty","difficulty","createUser","username","email","post","getUserByUsername","startGameSession","userId","sessionType","endGameSession","sessionId","score","totalQuestions","getUserGameHistory"],"sources":["C:/Users/jcupp/coderepos/0code/frontend/src/services/quizService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\nexport const quizService = {\n  // Get random questions for the game\n  getRandomQuestions: async (count = 10) => {\n    try {\n      const response = await api.get(`/questions/random?count=${count}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching random questions:', error);\n      throw error;\n    }\n  },\n\n  // Get all questions\n  getAllQuestions: async () => {\n    try {\n      const response = await api.get('/questions');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching questions:', error);\n      throw error;\n    }\n  },\n\n  // Get questions by difficulty\n  getQuestionsByDifficulty: async (difficulty) => {\n    try {\n      const response = await api.get(`/questions/by-difficulty?difficulty=${difficulty}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching questions by difficulty:', error);\n      throw error;\n    }\n  },\n\n  // Create a new user\n  createUser: async (username, email) => {\n    try {\n      const response = await api.post('/users', { username, email });\n      return response.data;\n    } catch (error) {\n      console.error('Error creating user:', error);\n      throw error;\n    }\n  },\n\n  // Get user by username\n  getUserByUsername: async (username) => {\n    try {\n      const response = await api.get(`/users/${username}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching user:', error);\n      throw error;\n    }\n  },\n\n  // Start a game session\n  startGameSession: async (userId, sessionType = 'PRACTICE') => {\n    try {\n      const response = await api.post('/game-sessions/start', {\n        userId,\n        sessionType\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error starting game session:', error);\n      throw error;\n    }\n  },\n\n  // End a game session\n  endGameSession: async (sessionId, score, totalQuestions) => {\n    try {\n      const response = await api.post(`/game-sessions/${sessionId}/end`, {\n        score,\n        totalQuestions\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error ending game session:', error);\n      throw error;\n    }\n  },\n\n  // Get user game history\n  getUserGameHistory: async (userId) => {\n    try {\n      const response = await api.get(`/users/${userId}/game-history`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching game history:', error);\n      throw error;\n    }\n  },\n};\n\nexport default quizService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}